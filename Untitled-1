// import { api, http, params } from "@serverless/cloud";
// import db from "./api/db.js";
// import passport from "passport";
// import { Strategy } from "passport-google-oauth20";
// import cookieParser from "cookie-parser";
// import jwt from "jsonwebtoken";
// import expressSession from "express-session";
// import { validateParams, UserSchema, projectName } from "./api/utils";
// const domain = "https://exciting-project-3awb8b.cloud.serverless.com";
    
// api.use(cookieParser({ secure: true }));
    
// api.use(
//     expressSession({
//     secret: projectSecrets.SESSION_ID,
//     resave: false,
//     saveUninitialized: false,
//     cookie: {
//         secure: true,
//         httpOnly: true,
//         maxAge: (60 * 60) * 1000,
//         domain: domain,
//     },
//     })
// );
    
// passport.use(
//     new Strategy(
//         {
//         clientID: projectSecrets.GOOGLE_ID,
//         clientSecret: projectSecrets.GOOGLE_SECRET,
//         callbackURL: `${domain}/login/auth/google/callback`,
//         passReqToCallback: true
//         },
//         async (req, accessToken, refreshToken, profile, cb) => {
//         if (req.headers.host !== domain) {
//             return cb(new Error("Invalid hostname"));
//         }
//         return cb(null, { accessToken, refreshToken, profile });
//         }
//     )
// );
    
// api.get(
//     "/login/auth/google",
//     passport.authenticate("google", { scope: ["email"], session: false })
// );
      
// api.get("/login/auth/google/callback", 
//     passport.authenticate("google", { failureRedirect: "/login", session: false }), 
//     validateParams(UserSchema), 
//     async (req, res) => {
//     try {
//         const userData = req.user;
//         const existingUser = await db.findUser(userData.profile.id);
//         if (!existingUser) {
//             await db.addUser(userData);
//         }
//         const token = jwt.sign({ 
//             id: userData.profile.id, 
//             email: userData.profile.emails[0].value 
//         }, projectSecrets.JWT_SECRET, { expiresIn: '1h', algorithm: 'HS256' });

//         res.cookie("user", token, {
//             secure: true,
//             sameSite: "strict",
//             httpOnly: true,
//             domain: domain,
//             maxAge: (60 * 60) * 1000,
//         });

//         res.redirect('/');
//     } catch (error) {
//         console.error(error);
//         res.status(400).send({ error: error.message });
//     }
// });  

// api.get("/protectedData", protect, (req, res) => {
//     res.json(["protected data here"]);
// });